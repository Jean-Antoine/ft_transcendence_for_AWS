Transcendance notes : 

--BACKEND--

language : Django
Database : Postgres

--FRONTEND--

language : Javascript / Bootstrap

MUST : 

 - be a single page application
 - user should be able to use the back and forward buttons
 - compatible with latest stable version of Google Chrome
 - be launched with a single command line to run an autonomous Docker container (docker-compose up --build)

--DOCKER--

 - under linux, Docker must be used in rootless mode : 
    -> Docker runtime files must be located in /goinfre or /sgoinfre
    -> Can't use bind-mount volumes between the host and the container if non root UIDs are used in the container

/!\ Solutions : Docker in a VM, rebuild container after changes, create own docker image with root as unique UID

--GAME--

 - must be able to play against another player directly on the website using the same keyboard.
    -> if Remote players module : 

 - should be possible to play tournaments (players taking turns playing each other)
    -> must display who is playing against whom and the order of the players

 - registration system required
    -> at the start of a tournament, each player must input their alias name. The aliases will be reset when a new tournament begins.
        -> if Standard User Management module : 
 - matchmaking system : tournament system organiwes participant's matchmaking and announce the next fight

 - same paddle speed for everyone (including AI)
    -> cap it ? 

--SECURITY--

 - Passwords stored in databases must be hashed
 - Website must be protected against SQL injections/XSS
 - if backend, must have HTTPS
 - must implement some form of validation for forms and user inpu
 - credentials, API keys, env variables must be saved locally in .env and ignored by git

                            
                            
                            
                           =============  MODULES  =============

/!\ THE MODULES SELECTED HERE ARE MY OWN SELECTION AND CAN BE DISCUSSED AT ANY MOMENT. JUST ASK NICELY BECAUSE IM AS FRAGILE AS I AM PRETTY THANK YOU
7 Major modules are required for 100% completion. 2 minor modules = 1 major module.

WEB : 
 - Use a framework to build the backend = Django						OK
 - (minor) Use a database for the backend							   	OK
 - (minor) Use a framework to build the frontend = Bootstrap

USER MANAGEMENT : 
 - Standard user management authentication, users across tournaments

GAMEPLAY AND USER EXP :
 - Remote players													         	OK
 - Live chat

AI - Algo :
 - (minor) User and Game Stats dashboard

CYBERSECURITY :
 - Implement WAF/ModSecurity with Hardened Configuration and HashiCorp Vault for Secrets Management
 - Implement Two Factor Authentication ?                          OK

GAMING : 
 - (minor) Game Customization Options

ACCESSIBILITY : 
 - (minor) Support on all devices
 - (minor) Multiple language supports

SERVER-SIDE PONG : 
 - Replacing basic pong with server-side pong ?
